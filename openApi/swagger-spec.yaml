openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - App
  /todo:
    get:
      operationId: TodoController_getTodoAll
      parameters: []
      responses:
        '200':
          description: TODOの取得
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoEntity'
      tags: &ref_0
        - Todo
    post:
      operationId: TodoController_createTodo
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTodoDto'
      responses:
        '200':
          description: TODOの作成
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoEntity'
      tags: *ref_0
  /todo/{id}:
    get:
      operationId: TodoController_getTodo
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: TODOの取得(指定したidのみ)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoEntity'
      tags: *ref_0
    put:
      operationId: TodoController_doneTodo
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: TODOの完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDto'
      tags: *ref_0
    delete:
      operationId: TodoController_deleteTodo
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: TODOの削除
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoEntity'
      tags: *ref_0
  /users:
    get:
      operationId: UserController_getUsers
      parameters: []
      responses:
        '200':
          description: ユーザーの取得
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEntity'
      tags: &ref_1
        - users
  /users/create:
    post:
      operationId: createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ユーザーの新規作成
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      summary: ユーザーの新規作成
      tags: *ref_1
  /users/update/{id}:
    patch:
      operationId: updateUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ユーザーの更新
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      summary: ユーザーの更新
      tags: *ref_1
  /users/delete/{id}:
    delete:
      operationId: deleteUser
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ユーザーの削除
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
      summary: ユーザーの削除
      tags: *ref_1
info:
  title: Todo API
  description: Todo API Documentation
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    TodoEntity:
      type: object
      properties:
        id:
          type: number
        title:
          type: string
        description:
          type: string
        createdAt:
          format: date-time
          type: string
        userId:
          type: number
        done:
          type: boolean
      required:
        - id
        - title
        - description
        - createdAt
        - userId
        - done
    CreateTodoDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          example: 説明はオプショナルです
        userId:
          type: number
      required:
        - title
        - userId
    ResponseDto:
      type: object
      properties:
        message:
          type: string
          description: メッセージ
          example: success
      required:
        - message
    UserEntity:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        name:
          type: string
        createdAt:
          format: date-time
          type: string
      required:
        - id
        - email
        - name
        - createdAt
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
